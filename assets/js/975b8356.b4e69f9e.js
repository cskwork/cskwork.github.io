"use strict";(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[62645],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:i},t)}},26396:function(e,t,n){n.d(t,{Z:function(){return d}});var a=n(87462),i=n(67294),r=n(72389),o=n(79443);var s=function(){var e=(0,i.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(89521),c=n(86010),u="tabItem_1uMI";function p(e){var t,n,a,r=e.lazy,o=e.block,p=e.defaultValue,d=e.values,m=e.groupId,h=e.className,f=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:f.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),g=(0,l.lx)(v,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(t=null!=p?p:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=f[0])?void 0:a.props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=s(),y=k.tabGroupChoices,w=k.setTabGroupChoices,T=(0,i.useState)(b),N=T[0],S=T[1],z=[],C=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var I=y[m];null!=I&&I!==N&&v.some((function(e){return e.value===I}))&&S(I)}var x=function(e){var t=e.currentTarget,n=z.indexOf(t),a=v[n].value;a!==N&&(C(t),S(a),null!=m&&w(m,a))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=z.indexOf(e.currentTarget)+1;n=z[a]||z[0];break;case"ArrowLeft":var i=z.indexOf(e.currentTarget)-1;n=z[i]||z[z.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":o},h)},v.map((function(e){var t=e.value,n=e.label;return i.createElement("li",{role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,className:(0,c.Z)("tabs__item",u,{"tabs__item--active":N===t}),key:t,ref:function(e){return z.push(e)},onKeyDown:j,onFocus:x,onClick:x},null!=n?n:t)}))),r?(0,i.cloneElement)(f.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==N})}))))}function d(e){var t=(0,r.Z)();return i.createElement(p,(0,a.Z)({key:String(t)},e))}},33562:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return h}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=n(26396),s=n(58215),l=["components"],c={title:"Security",disableHtmlPreviews:!0},u=void 0,p={unversionedId:"techniques/security",id:"techniques/security",isDocsHomePage:!1,title:"Security",description:"Security for Angular, React, and Vue Apps - Ionic Framework",source:"@site/docs/techniques/security.md",sourceDirName:"techniques",slug:"/techniques/security",permalink:"/docs/techniques/security",editUrl:"https://github.com/ionic-team/ionic-docs/edit/main/docs/techniques/security.md",tags:[],version:"current",frontMatter:{title:"Security",disableHtmlPreviews:!0}},d=[{value:"Sanitizing User Input",id:"sanitizing-user-input",children:[{value:"Angular",id:"angular",children:[],level:3},{value:"React",id:"react",children:[],level:3},{value:"Vue",id:"vue",children:[],level:3}],level:2},{value:"Enabling Custom HTML Parsing via <code>innerHTML</code>",id:"enabling-custom-html-parsing-via-innerhtml",children:[],level:2},{value:"Ejecting from the built-in sanitizer",id:"ejecting-from-the-built-in-sanitizer",children:[{value:"Disabling the sanitizer via config",id:"disabling-the-sanitizer-via-config",children:[],level:3},{value:"Bypassing the sanitizer on a case-by-case basis",id:"bypassing-the-sanitizer-on-a-case-by-case-basis",children:[{value:"Usage",id:"usage",children:[],level:4}],level:3}],level:2}],m={toc:d};function h(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("title",null,"Security for Angular, React, and Vue Apps - Ionic Framework"),(0,r.kt)("meta",{name:"description",content:"View Ionic's security info for sanitizing user input, ejecting from the built-in sanitizer, and more. Learn about app security using Angular, React, and Vue."})),(0,r.kt)("h2",{id:"sanitizing-user-input"},"Sanitizing User Input"),(0,r.kt)("p",null,"For components such as ",(0,r.kt)("inlineCode",{parentName:"p"},"ion-alert")," developers can allow for custom or user-provided content. This content can be plain text or HTML and should be considered untrusted. As with any untrusted input, it is important to sanitize it before doing anything else with it. In particular, using things like ",(0,r.kt)("inlineCode",{parentName:"p"},"innerHTML")," without sanitization provides an attack vector for bad actors to input malicious content and potentially launch a ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cross-site_scripting"},"Cross Site Scripting attack (XSS)"),"."),(0,r.kt)("p",null,"Ionic comes built in with a basic sanitization implementation for the components it provides. However, it is not a comprehensive solution. It is up to the developer to make sure all data that is passed is sanitized. Different frameworks have different solutions for sanitizing user input, so developers should familiarize themselves with what their specific framework offers."),(0,r.kt)("p",null,"For developers who are not using a framework, or for developers whose framework does not provide the sanitization methods they need, we recommend using ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/sanitize-html"},"sanitize-html"),". This package provides a simple HTML sanitizer that allows the developer to specify the exact tags and attributes that they want to allow in their application."),(0,r.kt)("h3",{id:"angular"},"Angular"),(0,r.kt)("p",null,"Angular comes built in with the ",(0,r.kt)("inlineCode",{parentName:"p"},"DomSanitizer")," class. This helps prevent XSS issues by ensuring that values are safe to be used in the DOM. By default, Angular will mark any values it deems unsafe. For example, the following link would be marked as unsafe by Angular because it would attempt to execute some JavaScript."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'public myUrl: string = \'javascript:alert("oh no!")\';\n\n...\n\n<a [href]="myUrl">Click Me!</a>\n')),(0,r.kt)("p",null,"To learn more about the built-in protections that Angular provides, see the ",(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/security"},"Angular Security Guide"),"."),(0,r.kt)("h3",{id:"react"},"React"),(0,r.kt)("p",null,"React DOM escapes values embedded in JSX before rendering them by converting them to strings. For example, the following would be safe as ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is converted to a string before being rendered:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const name = values.name;\nconst element = <h1>Hello, {name}!</h1>;\n")),(0,r.kt)("p",null,"However, this does not stop someone from injecting JavaScript into places such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," attribute of an anchor element. The following is unsafe and can potentially allow an XSS attack to occur:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const userInput = 'javascript:alert(\"Oh no!\")';\nconst element = <a href={userInput}>Click Me!</a>;\n")),(0,r.kt)("p",null,"If the developer needs to achieve more comprehensive sanitization, they can use the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/sanitize-html"},"sanitize-html")," package."),(0,r.kt)("p",null,"To learn more about the built-in protections that React and JSX provide, see the ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/introducing-jsx.html#jsx-prevents-injection-attacks"},"React JSX Documentation"),"."),(0,r.kt)("h3",{id:"vue"},"Vue"),(0,r.kt)("p",null,"Vue does not provide any type of sanitizing methods built in. It is recommended that developers use a package such as ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/sanitize-html"},"sanitize-html"),"."),(0,r.kt)("p",null,"To learn more about the security recommendations for binding to directives such as ",(0,r.kt)("inlineCode",{parentName:"p"},"v-html"),", see the ",(0,r.kt)("a",{parentName:"p",href:"https://vuejs.org/v2/guide/syntax.html#Raw-HTML"},"Vue Syntax Guide"),"."),(0,r.kt)("h2",{id:"enabling-custom-html-parsing-via-innerhtml"},"Enabling Custom HTML Parsing via ",(0,r.kt)("inlineCode",{parentName:"h2"},"innerHTML")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ion-alert"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ion-infinite-scroll-content"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ion-loading"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ion-refresher-content"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"ion-toast")," can accept custom HTML as strings for certain properties. These strings are added to the DOM using ",(0,r.kt)("inlineCode",{parentName:"p"},"innerHTML")," and must be properly sanitized by the developer. This behavior is disabled by default which means values passed to the affected components will always be interpreted as plaintext. Developers can enable this custom HTML behavior by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"innerHTMLTemplatesEnabled: true")," in the ",(0,r.kt)("a",{parentName:"p",href:"../developing/config#ionicconfig"},"IonicConfig"),"."),(0,r.kt)("h2",{id:"ejecting-from-the-built-in-sanitizer"},"Ejecting from the built-in sanitizer"),(0,r.kt)("p",null,"For developers who wish to add complex HTML to components such as ",(0,r.kt)("inlineCode",{parentName:"p"},"ion-toast"),", they will need to eject from the sanitizer that is built into Ionic Framework. Developers can either disable the sanitizer across their entire app or bypass it on a case-by-case basis."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Bypassing sanitization functionality can make your application vulnerable to ",(0,r.kt)("a",{href:"https://en.wikipedia.org/wiki/Cross-site_scripting",target:"_blank",rel:"noreferrer"},"XSS attacks"),". Please exercise extreme caution when disabling the sanitizer."))),(0,r.kt)("h3",{id:"disabling-the-sanitizer-via-config"},"Disabling the sanitizer via config"),(0,r.kt)("p",null,"Ionic Framework provides an application config option called ",(0,r.kt)("inlineCode",{parentName:"p"},"sanitizerEnabled")," that is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," by default. Set this value to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," to globally disable Ionic Framework's built in sanitizer. Please note that this does not disable any sanitizing functionality provided by other frameworks such as Angular."),(0,r.kt)("h3",{id:"bypassing-the-sanitizer-on-a-case-by-case-basis"},"Bypassing the sanitizer on a case-by-case basis"),(0,r.kt)("p",null,"Developers can also choose to eject from the sanitizer in certain scenarios. Ionic Framework provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"IonicSafeString")," class that allows developers to do just that."),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)(o.Z,{groupId:"framework",defaultValue:"angular",values:[{value:"angular",label:"Angular"},{value:"javascript",label:"JavaScript"},{value:"react",label:"React"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"angular",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { IonicSafeString, ToastController } from '@ionic/angular';\n\n...\n\nconstructor(private toastController: ToastController) {}\n\nasync presentToast() {\n  const toast = await this.toastController.create({\n      message: new IonicSafeString('<ion-button>Hello!</ion-button>'),\n      duration: 2000\n  });\n  toast.present();\n}\n\n"))),(0,r.kt)(s.Z,{value:"javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { IonicSafeString } from '@ionic/core';\n\n...\n\nconst async presentToast = () => {\n  const toast = document.createElement('ion-toast');\n  toast.message = new IonicSafeString('<ion-button>Hello!</ion-button>');\n  toast.duration = 2000;\n\n  document.body.appendChild(toast);\n  return toast.present();\n}\n\n"))),(0,r.kt)(s.Z,{value:"react",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useState } from 'react';\nimport { Animation, IonButton, IonContent, IonicSafeString, IonToast } from '@ionic/react';\n\nexport const ToastExample: React.FC = () => {\n  const [showToast, setShowToast] = useState(false);\n\n  return (\n    <IonContent>\n      <IonButton onClick={() => setShowToast(true)} expand=\"block\">Show Toast</IonButton>\n      <IonToast\n        isOpen={showToast}\n        onDidDismiss={() => setShowToast(false)}\n        message={new IonicSafeString('<ion-button>Hello!</ion-button>')}\n        duration={2000}\n      />\n    </IonContent>\n  )\n};\n")))))}h.isMDXComponent=!0}}]);